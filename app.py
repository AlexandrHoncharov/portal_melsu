from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from flask_jwt_extended import JWTManager, create_access_token, create_refresh_token, jwt_required, get_jwt_identity
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import secrets
import re
import json

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['SECRET_KEY'] = 'dev-secret-key-change-in-production'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///university.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'jwt-secret-string'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
app.config['JWT_REFRESH_TOKEN_EXPIRES'] = timedelta(days=30)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db = SQLAlchemy(app)
jwt = JWTManager(app)
CORS(app, supports_credentials=True)


# =============== –ú–û–î–ï–õ–ò –ë–ê–ó –î–ê–ù–ù–´–• ===============

class User(db.Model):
    """–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    phone = db.Column(db.String(20))
    is_verified = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

    # –°–≤—è–∑–∏
    profile = db.relationship('UserProfile', backref='user', uselist=False, cascade="all, delete-orphan")
    roles = db.relationship('Role', secondary='user_roles', backref='users')
    created_forms = db.relationship('Form', backref='creator')


class UserProfile(db.Model):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    first_name = db.Column(db.String(50))
    last_name = db.Column(db.String(50))
    middle_name = db.Column(db.String(50))
    birth_date = db.Column(db.Date)
    gender = db.Column(db.String(10))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ —Ä–æ–ª—è–º
    department = db.Column(db.String(100))  # –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    position = db.Column(db.String(100))  # –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    course = db.Column(db.Integer)  # –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    group_name = db.Column(db.String(20))  # –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    school = db.Column(db.String(200))  # –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤


class Role(db.Model):
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)  # student, teacher, etc
    display_name = db.Column(db.String(100))  # –°—Ç—É–¥–µ–Ω—Ç, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, etc
    description = db.Column(db.Text)


# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π
user_roles = db.Table('user_roles',
                      db.Column('user_id', db.Integer, db.ForeignKey('user.id'), primary_key=True),
                      db.Column('role_id', db.Integer, db.ForeignKey('role.id'), primary_key=True)
                      )


class VerificationCode(db.Model):
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email"""
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), nullable=False)
    code = db.Column(db.String(6), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    verified = db.Column(db.Boolean, default=False)

    def is_expired(self):
        return (datetime.utcnow() - self.created_at).total_seconds() > 600  # 10 –º–∏–Ω—É—Ç


class RegistrationData(db.Model):
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), nullable=False)
    data = db.Column(db.Text)  # JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def is_expired(self):
        return (datetime.utcnow() - self.created_at).total_seconds() > 3600  # 1 —á–∞—Å


class Form(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º (–æ—Ç—á–µ—Ç—ã/–∑–∞—è–≤–∫–∏)"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    form_type = db.Column(db.String(50))  # '–æ—Ç—á–µ—Ç—ã' –∏–ª–∏ '–∑–∞—è–≤–∫–∏'
    responsible = db.Column(db.String(100))
    period = db.Column(db.String(50))
    fields = db.Column(db.Text)  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—è–º–∏
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


class Department(db.Model):
    """–ú–æ–¥–µ–ª—å —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    short_name = db.Column(db.String(50))  # –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    description = db.Column(db.Text)
    parent_id = db.Column(db.Integer, db.ForeignKey('department.id'))
    head_user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # –°–≤—è–∑–∏
    parent = db.relationship('Department', remote_side=[id], backref='children')
    head = db.relationship('User', foreign_keys=[head_user_id], backref='headed_departments')
    creator = db.relationship('User', foreign_keys=[created_by], backref='created_departments')


# =============== –£–¢–ò–õ–ò–¢–´ ===============

def generate_verification_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 5-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return str(secrets.randbelow(100000)).zfill(5)


def send_verification_email(email, code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å)"""
    print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ {code} –Ω–∞ {email}")
    return True


def cleanup_old_records():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        old_codes = VerificationCode.query.filter(
            VerificationCode.created_at < datetime.utcnow() - timedelta(hours=1)
        ).all()
        for code in old_codes:
            db.session.delete(code)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
        old_data = RegistrationData.query.filter(
            RegistrationData.created_at < datetime.utcnow() - timedelta(hours=2)
        ).all()
        for data in old_data:
            db.session.delete(data)

        db.session.commit()
        print("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()


def create_default_roles():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    roles_data = [
        {'name': 'student', 'display_name': '–°—Ç—É–¥–µ–Ω—Ç', 'description': '–û–±—É—á–∞—é—â–∏–π—Å—è —Å—Ç—É–¥–µ–Ω—Ç'},
        {'name': 'teacher', 'display_name': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'description': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤'},
        {'name': 'employee', 'display_name': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', 'description': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'},
        {'name': 'schoolboy', 'display_name': '–®–∫–æ–ª—å–Ω–∏–∫', 'description': '–£—á–∞—â–∏–π—Å—è —à–∫–æ–ª—ã'},
        {'name': 'admin', 'display_name': '–ê–¥–º–∏–Ω', 'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã'}
    ]

    for role_data in roles_data:
        if not Role.query.filter_by(name=role_data['name']).first():
            role = Role(**role_data)
            db.session.add(role)

    db.session.commit()
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")


# =============== API –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===============

@app.route('/api/auth/register-step1', methods=['POST'])
def register_step1():
    """–®–∞–≥ 1: –í–≤–æ–¥ email –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = request.get_json()
    email = data.get('email', '').strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not email:
        return jsonify({'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

    if not re.match(r'^[^\s@]+@[^\s@]+\.[^\s@]+$', email):
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if User.query.filter_by(email=email).first():
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    cleanup_old_records()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    verification_code = generate_verification_code()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ email
    VerificationCode.query.filter_by(email=email).delete()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    new_code = VerificationCode(email=email, code=verification_code)
    db.session.add(new_code)
    db.session.commit()

    # "–û—Ç–ø—Ä–∞–≤–∫–∞" –∫–æ–¥–∞
    send_verification_email(email, verification_code)

    print(f"üìù –°–æ–∑–¥–∞–Ω –∫–æ–¥ {verification_code} –¥–ª—è {email}")
    return jsonify({'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'}), 200


@app.route('/api/auth/verify-code', methods=['POST'])
def verify_code():
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = request.get_json()
    email = data.get('email')
    code = data.get('code')

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ {code} –¥–ª—è {email}")

    if not email or not code:
        return jsonify({'error': 'Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ –±–∞–∑–µ
    verification = VerificationCode.query.filter_by(
        email=email,
        code=code,
        verified=False
    ).first()

    if not verification:
        print(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        all_codes = VerificationCode.query.filter_by(email=email).all()
        print(f"üìã –í—Å–µ –∫–æ–¥—ã –¥–ª—è {email}:")
        for vc in all_codes:
            print(f"   - {vc.code} (verified: {vc.verified}, created: {vc.created_at})")
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if verification.is_expired():
        print(f"‚è∞ –ö–æ–¥ –∏—Å—Ç–µ–∫")
        db.session.delete(verification)
        db.session.commit()
        return jsonify({'error': '–ö–æ–¥ –∏—Å—Ç–µ–∫'}), 400

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
    verification.verified = True
    db.session.commit()

    print(f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è {email}")
    return jsonify({'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}), 200


@app.route('/api/auth/resend-code', methods=['POST'])
def resend_code():
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = request.get_json()
    email = data.get('email', '').strip()

    if not email:
        return jsonify({'error': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if User.query.filter_by(email=email).first():
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    verification_code = generate_verification_code()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤
    VerificationCode.query.filter_by(email=email).delete()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    new_code = VerificationCode(email=email, code=verification_code)
    db.session.add(new_code)
    db.session.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    send_verification_email(email, verification_code)

    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ {verification_code} –¥–ª—è {email}")
    return jsonify({'message': '–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}), 200


@app.route('/api/auth/register-step3', methods=['POST'])
def register_step3():
    """–®–∞–≥ 3: –í–≤–æ–¥ username –∏ –ø–∞—Ä–æ–ª—è"""
    data = request.get_json()
    email = data.get('email')
    username = data.get('username')
    password = data.get('password')

    if not all([email, username, password]):
        return jsonify({'error': '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    verification = VerificationCode.query.filter_by(email=email, verified=True).first()
    if not verification:
        return jsonify({'error': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}), 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
    if User.query.filter_by(username=username).first():
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    RegistrationData.query.filter_by(email=email).delete()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    reg_data = RegistrationData(
        email=email,
        data=json.dumps({
            'email': email,
            'username': username,
            'password': password
        })
    )
    db.session.add(reg_data)
    db.session.commit()

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {email}")
    return jsonify({'message': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'}), 200


@app.route('/api/auth/register-step4', methods=['POST'])
def register_step4():
    """–®–∞–≥ 4: –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    data = request.get_json()
    email = data.get('email')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    reg_data = RegistrationData.query.filter_by(email=email).first()
    if not reg_data or reg_data.is_expired():
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏'}), 400

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = json.loads(reg_data.data)
    user_data.update({
        'first_name': data.get('first_name'),
        'last_name': data.get('last_name'),
        'middle_name': data.get('middle_name'),
        'birth_date': data.get('birth_date'),
        'gender': data.get('gender')
    })

    reg_data.data = json.dumps(user_data)
    db.session.commit()

    print(f"üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {email}")
    return jsonify({'message': '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'}), 200


@app.route('/api/auth/register-complete', methods=['POST'])
def register_complete():
    """–®–∞–≥ 5: –í—ã–±–æ—Ä —Ä–æ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    email = data.get('email')
    selected_roles = data.get('roles', [])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_data = RegistrationData.query.filter_by(email=email).first()
    if not reg_data or reg_data.is_expired():
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏'}), 400

    user_data = json.loads(reg_data.data)

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            email=user_data['email'],
            username=user_data['username'],
            password_hash=generate_password_hash(user_data['password']),
            is_verified=True
        )
        db.session.add(user)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = UserProfile(
            user_id=user.id,
            first_name=user_data.get('first_name'),
            last_name=user_data.get('last_name'),
            middle_name=user_data.get('middle_name'),
            gender=user_data.get('gender')
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if user_data.get('birth_date'):
            try:
                profile.birth_date = datetime.strptime(user_data['birth_date'], '%Y-%m-%d').date()
            except ValueError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

        db.session.add(profile)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        for role_display in selected_roles:
            role = Role.query.filter_by(display_name=role_display).first()
            if role:
                user.roles.append(role)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        db.session.commit()

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        VerificationCode.query.filter_by(email=email).delete()
        RegistrationData.query.filter_by(email=email).delete()
        db.session.commit()

        print(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return jsonify({'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}), 201

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}), 500


# =============== API –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===============

@app.route('/api/auth/login', methods=['POST'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({'error': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.query.filter_by(email=email).first()

    if not user or not check_password_hash(user.password_hash, password):
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401

    if not user.is_verified:
        return jsonify({'error': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}), 401

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
    user.last_login = datetime.utcnow()
    db.session.commit()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    access_token = create_access_token(identity=user.id)
    refresh_token = create_refresh_token(identity=user.id)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    user_roles = [role.display_name for role in user.roles]

    response_data = {
        'access_token': access_token,
        'refresh_token': refresh_token,
        'user': {
            'id': user.id,
            'email': user.email,
            'username': user.username,
            'roles': user_roles,
            'profile': None
        }
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if user.profile:
        response_data['user']['profile'] = {
            'first_name': user.profile.first_name,
            'last_name': user.profile.last_name,
            'middle_name': user.profile.middle_name,
        }

    print(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return jsonify(response_data), 200


@app.route('/api/auth/refresh', methods=['POST'])
@jwt_required(refresh=True)
def refresh():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞"""
    current_user_id = get_jwt_identity()
    new_token = create_access_token(identity=current_user_id)
    return jsonify({'access_token': new_token})


# =============== API –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===============

@app.route('/api/user/profile', methods=['GET'])
@jwt_required()
def get_profile():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    if not user:
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_data = {
        'id': user.id,
        'email': user.email,
        'username': user.username,
        'phone': user.phone,
        'roles': [role.display_name for role in user.roles],
        'full_name': None,
        'birth_date': None
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    if user.profile:
        # –ü–æ–ª–Ω–æ–µ –∏–º—è
        names = [user.profile.last_name, user.profile.first_name, user.profile.middle_name]
        user_data['full_name'] = ' '.join(filter(None, names))

        # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        if user.profile.birth_date:
            months = [
                '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
            ]
            day = user.profile.birth_date.day
            month = months[user.profile.birth_date.month - 1]
            year = user.profile.birth_date.year
            user_data['birth_date'] = f"{day} {month} {year} –≥."

        # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
        user_data['profile'] = {
            'first_name': user.profile.first_name,
            'last_name': user.profile.last_name,
            'middle_name': user.profile.middle_name,
            'gender': user.profile.gender,
            'department': user.profile.department,
            'position': user.profile.position,
            'course': user.profile.course,
            'group_name': user.profile.group_name,
            'school': user.profile.school
        }

    return jsonify(user_data), 200


# =============== API –§–û–†–ú ===============

@app.route('/api/forms', methods=['GET'])
@jwt_required()
def get_forms():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    forms = Form.query.all()

    forms_data = []
    for form in forms:
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ JSON
        fields = json.loads(form.fields) if form.fields else []

        forms_data.append({
            'id': form.id,
            'name': form.name,
            'description': form.description,
            'type': form.form_type,
            'responsible': form.responsible,
            'period': form.period,
            'fields': fields,
            'create': form.created_at.strftime('%d.%m.%Y'),
            'status': '–ê–∫—Ç–∏–≤–Ω–∞'  # –ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ
        })

    return jsonify(forms_data), 200


@app.route('/api/forms', methods=['POST'])
@jwt_required()
def create_form():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    data = request.get_json()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
        form = Form(
            name=data.get('name'),
            description=data.get('description'),
            form_type=data.get('type'),
            responsible=data.get('responsible'),
            period=data.get('period'),
            fields=json.dumps(data.get('fields', [])),
            created_by=current_user_id
        )

        db.session.add(form)
        db.session.commit()

        print(f"üìÑ –°–æ–∑–¥–∞–Ω–∞ —Ñ–æ—Ä–º–∞ '{form.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")
        return jsonify({
            'id': form.id,
            'message': '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞'
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã'}), 500


@app.route('/api/forms/<int:form_id>', methods=['DELETE'])
@jwt_required()
def delete_form(form_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    form = Form.query.get(form_id)
    if not form:
        return jsonify({'error': '–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404

    try:
        form_name = form.name
        db.session.delete(form)
        db.session.commit()

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ '{form_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")
        return jsonify({'message': '–§–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω–∞'}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã'}), 500


# =============== API –°–¢–†–£–ö–¢–£–†–´ ===============

@app.route('/api/departments', methods=['GET'])
@jwt_required()
def get_departments():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    departments = Department.query.all()

    def build_tree(parent_id=None):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        result = []
        for dept in departments:
            if dept.parent_id == parent_id:
                dept_data = {
                    'id': dept.id,
                    'name': dept.name,
                    'short_name': dept.short_name,
                    'description': dept.description,
                    'parent_id': dept.parent_id,
                    'head': {
                        'id': dept.head.id,
                        'name': f"{dept.head.profile.last_name} {dept.head.profile.first_name}" if dept.head and dept.head.profile else None
                    } if dept.head else None,
                    'children': build_tree(dept.id),
                    'created_at': dept.created_at.strftime('%d.%m.%Y')
                }
                result.append(dept_data)
        return result

    tree = build_tree()
    return jsonify(tree), 200


@app.route('/api/departments', methods=['POST'])
@jwt_required()
def create_department():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    data = request.get_json()

    try:
        department = Department(
            name=data.get('name'),
            short_name=data.get('short_name'),
            description=data.get('description'),
            parent_id=data.get('parent_id') if data.get('parent_id') else None,
            head_user_id=data.get('head_user_id') if data.get('head_user_id') else None,
            created_by=current_user_id
        )

        db.session.add(department)
        db.session.commit()

        print(f"üè¢ –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{department.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")
        return jsonify({
            'id': department.id,
            'message': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ'
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'}), 500


@app.route('/api/departments/<int:dept_id>', methods=['PUT'])
@jwt_required()
def update_department(dept_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    department = Department.query.get(dept_id)
    if not department:
        return jsonify({'error': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}), 404

    data = request.get_json()

    try:
        department.name = data.get('name', department.name)
        department.short_name = data.get('short_name', department.short_name)
        department.description = data.get('description', department.description)
        department.parent_id = data.get('parent_id') if data.get('parent_id') else None
        department.head_user_id = data.get('head_user_id') if data.get('head_user_id') else None

        db.session.commit()

        print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{department.name}'")
        return jsonify({'message': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'}), 500


@app.route('/api/departments/<int:dept_id>', methods=['DELETE'])
@jwt_required()
def delete_department(dept_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    department = Department.query.get(dept_id)
    if not department:
        return jsonify({'error': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}), 404

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if department.children:
        return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏'}), 400

    try:
        dept_name = department.name
        db.session.delete(department)
        db.session.commit()

        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_name}'")
        return jsonify({'message': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'}), 500


@app.route('/api/users/employees', methods=['GET'])
@jwt_required()
def get_employees():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    current_user_id = get_jwt_identity()
    user = User.query.get(current_user_id)

    user_roles = [role.name for role in user.roles]
    if 'admin' not in user_roles:
        return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    employee_role = Role.query.filter_by(name='employee').first()
    teacher_role = Role.query.filter_by(name='teacher').first()

    employees = []
    if employee_role:
        employees.extend(employee_role.users)
    if teacher_role:
        employees.extend(teacher_role.users)

    # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_employees = {emp.id: emp for emp in employees}.values()

    result = []
    for emp in unique_employees:
        if emp.profile:
            full_name = f"{emp.profile.last_name} {emp.profile.first_name}"
            if emp.profile.middle_name:
                full_name += f" {emp.profile.middle_name}"
        else:
            full_name = emp.username

        result.append({
            'id': emp.id,
            'name': full_name,
            'username': emp.username,
            'email': emp.email
        })

    return jsonify(result), 200


# =============== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò ===============

@app.route('/api/test/create-admin', methods=['POST'])
def create_test_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if User.query.filter_by(username='admin').first():
        return jsonify({'error': '–ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞
        admin = User(
            email='admin@university.ru',
            username='admin',
            password_hash=generate_password_hash('admin123'),
            is_verified=True
        )
        db.session.add(admin)
        db.session.flush()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = UserProfile(
            user_id=admin.id,
            first_name='–ê–¥–º–∏–Ω',
            last_name='–°–∏—Å—Ç–µ–º—ã',
            middle_name='–ê–¥–º–∏–Ω–æ–≤–∏—á'
        )
        db.session.add(profile)

        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
        admin_role = Role.query.filter_by(name='admin').first()
        if admin_role:
            admin.roles.append(admin_role)

        db.session.commit()

        print("üëë –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return jsonify({
            'message': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω',
            'email': 'admin@university.ru',
            'password': 'admin123'
        }), 201

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞'}), 500


@app.route('/api/test/cleanup', methods=['POST'])
def cleanup_database():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        cleanup_old_records()
        return jsonify({'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞'}), 200
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}'}), 500


# =============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===============

if __name__ == '__main__':
    with app.app_context():
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        db.create_all()
        print("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π
        create_default_roles()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        cleanup_old_records()

    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
    print("üìã –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞: POST /api/test/create-admin")
    print("üßπ –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã: POST /api/test/cleanup")

    app.run(debug=True, port=5000, host='0.0.0.0')